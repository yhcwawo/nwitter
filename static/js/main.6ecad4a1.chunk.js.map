{"version":3,"sources":["fbase.js","component/AuthForm.js","routes/Auth.js","component/Nweet.js","component/NweetFactory.js","routes/Home.js","component/Navigation.js","routes/Profile.js","component/Router.js","component/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setpassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLogigedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAcAA,IAASC,cATc,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,6CAKJ,IAAMM,EAAmBT,IACnBU,EAAcV,IAASW,OACvBC,EAAYZ,IAASa,YACrBC,EAAiBd,IAASe,UC8CxBC,EA5DE,WAAO,IAAD,EAEQC,mBAAS,IAFjB,mBAEZC,EAFY,KAELC,EAFK,OAGcF,mBAAS,IAHvB,mBAGZG,EAHY,KAGFC,EAHE,OAIiBJ,oBAAS,GAJ1B,mBAIZK,EAJY,KAIAC,EAJA,OAKON,mBAAS,IALhB,mBAKZO,EALY,KAKLC,EALK,KAObC,EAAW,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAGF,UAATD,EACCV,EAASW,GACI,aAARD,GACLR,EAAYS,IAKdC,EAAQ,uCAAG,WAAMJ,GAAN,eAAAK,EAAA,yDACbL,EAAMM,iBADO,UAKNX,EALM,gCAMSZ,EAAYwB,+BAA+BhB,EAAOE,GAN3D,OAMJe,EANI,+CASSzB,EAAY0B,2BAA2BlB,EAAOE,GATvD,QASJe,EATI,eAaTE,QAAQC,IAAIH,GAbH,kDAgBTV,EAAS,KAAMc,SAhBN,0DAAH,sDAqBlB,OACI,qCACI,uBAAMR,SAAUA,EAAUS,UAAU,YAApC,UACI,uBAAOX,KAAK,QAAQY,KAAK,QAAQC,YAAY,QAAQC,UAAQ,EAACb,MAAOZ,EAAOQ,SAAYA,EAAUc,UAAU,cAC5G,uBAAOX,KAAK,WAAWY,KAAK,WAAWC,YAAY,WAAWC,UAAQ,EAACb,MAAOV,EAAUM,SAAYA,EAAUc,UAAU,cACxH,uBAAOC,KAAK,SAASX,MAAOR,EAAa,iBAAmB,UAAWkB,UAAU,yBAChFhB,GAAS,sBAAMgB,UAAU,YAAhB,SAA6BhB,OAG3C,sBAAMoB,QAXY,kBAAMrB,GAAc,SAACsB,GAAD,OAAWA,MAWnBL,UAAU,aAAxC,SACKlB,EAAa,WAAa,uB,gBCRxBwB,EArCF,WAET,IAAMC,EAAa,uCAAG,WAAOpB,GAAP,iBAAAK,EAAA,4DAKN,YAHLH,EAAQF,EAAMC,OAAdC,MAIHmB,EAAW,IAAIvC,EAAiBE,KAAKsC,mBAExB,WAARpB,IACLmB,EAAW,IAAIvC,EAAiBE,KAAKuC,oBATvB,SAYZxC,EAAYyC,gBAAgBH,GAZhB,2CAAH,sDAenB,OACI,sBAAKR,UAAU,gBAAf,UACI,cAAC,IAAD,CACAY,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,MAEvB,cAAC,EAAD,IACA,sBAAKjB,UAAU,WAAf,UACI,yBAAQI,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACqB,cAAC,IAAD,CAAiBY,KAAMM,SAE5C,yBAAQd,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACqB,cAAC,IAAD,CAAiBY,KAAMO,gB,gBCqD7CC,EAxFD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAAa,EACL7C,oBAAS,GADJ,mBAC5B8C,EAD4B,KACnBC,EADmB,OAGH/C,mBAAS4C,EAASI,MAHf,mBAG5BC,EAH4B,KAGlBC,EAHkB,KAMzBC,EAAa,uCAAG,sBAAApC,EAAA,0DACPqC,OAAOC,QAAQ,+CADR,gCAKT1D,EAAU2D,IAAV,iBAAwBV,EAASW,KAAMC,SAL9B,uBAMT3D,EAAe4D,WAAWb,EAASc,eAAeF,SANzC,iEAAH,qDAcbG,EAAgB,kBAAMZ,GAAW,SAACnB,GAAD,OAAWA,MAC5Cd,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,6DACbL,EAAMM,iBACNI,QAAQC,IAAIuB,EAAUK,GAFT,SAIPtD,EAAU2D,IAAV,iBAAwBV,EAASW,KAAMK,OAAO,CAChDZ,KAAMC,IALG,OAQbF,GAAW,GARE,2CAAH,sDAiBlB,OACQ,qBAAKxB,UAAU,QAAf,SAEIuB,EACI,mCACCD,GACG,qCACI,uBAAM/B,SAAUA,EAAUS,UAAU,sBAApC,UACI,uBAAOC,KAAK,OAAOC,YAAY,kBAAkBZ,MAAOoC,EAAUvB,UAAQ,EAACmC,WAAS,EAACpD,SAf5F,SAACC,GAAW,IAEXG,EACVH,EADAC,OAAUE,MAEdqC,EAAYrC,IAWiHU,UAAU,cACnH,uBAAOC,KAAK,SAASX,MAAM,eAAeU,UAAU,eAExD,sBAAMI,QAASgC,EAAepC,UAAU,oBAAxC,yBASR,qCACA,6BAAKqB,EAASI,OACbJ,EAASc,eAAiB,qBAAKI,IAAKlB,EAASc,gBAE7Cb,GACG,mCACA,sBAAKkB,MAAM,iBAAX,UACI,sBAAMpC,QAASwB,EAAf,SACI,cAAC,IAAD,CAAiBhB,KAAM6B,QAE3B,sBAAMrC,QAASgC,EAAf,SACI,cAAC,IAAD,CAAiBxB,KAAM8B,mB,QCqCxCC,EA1GM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EAENnE,mBAAS,IAFH,mBAEzBoE,EAFyB,KAElBC,EAFkB,OAGMrE,mBAAS,IAHf,mBAGzBsE,EAHyB,KAGZC,EAHY,KAK1BzD,EAAQ,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACC,KAAVqD,EADS,oDAKb1D,EAAMM,iBACF0C,EAAgB,GAID,KAAfY,EAVS,wBAWHE,EAAgB3E,EAAe4E,MAAMC,MAArB,UAA8BP,EAAQQ,IAAtC,YAA6CC,gBAX1D,SAYcJ,EAAcK,UAAUP,EAAW,YAZjD,cAYHQ,EAZG,iBAaaA,EAASL,IAAIM,iBAb1B,QAaTrB,EAbS,sBAgBPd,EAAW,CACbI,KAAOoB,EACPY,UAAUC,KAAKC,MACfC,UAAWhB,EAAQQ,IACnBjB,iBApBS,UAuBP/D,EAAUyF,WAAW,UAAUC,IAAIzC,GAvB5B,QAwBbyB,EAAS,IACTE,EAAc,IAzBD,4CAAH,sDAwDlB,OAEI,uBAAMzD,SAAUA,EAAUS,UAAU,cAApC,UACE,sBAAKA,UAAU,0BAAf,UACE,uBACEA,UAAU,sBACVV,MAAOuD,EACP3D,SAnCW,SAACC,GAAW,IACRG,EAAUH,EAAnBC,OAASE,MACjBwD,EAASxD,IAkCPW,KAAK,OACLC,YAAY,uBACZ6D,UAAW,MAEb,uBAAO9D,KAAK,SAASX,MAAM,SAASU,UAAU,2BAEhD,wBAAOgE,IAAI,cAAchE,UAAU,sBAAnC,UACE,8CACA,cAAC,IAAD,CAAiBY,KAAMqD,SAEzB,uBAAOjC,GAAG,cACR/B,KAAK,OACLiE,OAAO,UACPhF,SA3CiB,SAACC,GAAW,IAEvBgF,EADqBhF,EAAnBC,OAASgF,MACK,GAChBC,EAAU,IAAIC,WAEpBD,EAAOE,UAAY,SAACC,GAAmB,IAGfC,EACfD,EADDE,cAAgBD,OAGpBzB,EAAcyB,IAGlBJ,EAAOM,cAAcR,IA8BrBnD,MAAO,CACL4D,QAAS,KAGV7B,GACW,sBAAK/C,UAAU,0BAAf,UACA,qBACEuC,IAAKQ,EACL/B,MAAO,CACL6D,gBAAiB9B,KAGrB,sBAAK/C,UAAU,qBAAqBI,QAtCrB,kBAAM4C,EAAc,KAsCnC,UACE,0CACA,cAAC,IAAD,CAAiBpC,KAAMkE,gBClE9BC,EAhCF,SAAC,GAAe,IAAdnC,EAAa,EAAbA,QAAa,EACInE,mBAAS,IADb,mBACjBuG,EADiB,KACTC,EADS,KAkBxB,OAfAC,qBAAU,WAMN9G,EAAUyF,WAAW,UAAUsB,YAAW,SAAAC,GACtC,IAAMC,EAAcD,EAASE,KAAKC,KAAI,SAAAxD,GAAG,oBACrCC,GAAGD,EAAIC,IACJD,EAAIpC,WAEXsF,EAAUI,QAEd,IAGA,sBAAKrF,UAAU,YAAf,UACI,cAAC,EAAD,CAAc4C,QAASA,IAEvB,qBAAK5B,MAAO,CAAEwE,UAAW,IAAzB,SACCR,EAAOO,KAAI,SAAA1C,GAAK,OACb,cAAC,EAAD,CAAsBxB,SAAUwB,EAAOvB,QAASuB,EAAMe,YAAchB,EAAQQ,KAAhEP,EAAMb,aCanByD,EApCI,SAAC,GAAD,IAAE7C,EAAF,EAAEA,QAAF,OACnB,8BACI,qBAAI5B,MAAO,CAAE0E,QAAS,OAAQC,eAAgB,SAAUH,UAAW,IAAnE,UACI,6BACI,cAAC,IAAD,CAAMI,GAAG,IAAI5E,MAAO,CAAE6E,YAAa,IAAnC,SACA,cAAC,IAAD,CAAiBjF,KAAMC,IAAWC,MAAO,UAAWC,KAAK,WAG7D,6BAEA,eAAC,IAAD,CACE6E,GAAG,WACH5E,MAAO,CACL8E,WAAY,GACZJ,QAAS,OACTK,cAAe,SACfC,WAAY,SACZC,SAAU,IAPd,UAUE,cAAC,IAAD,CAAiBrF,KAAMsF,IAAQpF,MAAO,UAAWC,KAAK,OACtD,sBAAMC,MAAO,CAAEwE,UAAW,IAA1B,SACG5C,EAAQuD,YAAR,UACMvD,EAAQuD,YADd,kBAEG,uBC1BD,cAA6B,IAA3BC,EAA0B,EAA1BA,YAAaxD,EAAa,EAAbA,QACpByD,EAAUC,cADuB,EAEK7H,mBAASmE,EAAQuD,aAFtB,mBAEhCI,EAFgC,KAEhBC,EAFgB,KAkBjCjH,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,yDACbL,EAAMM,iBACHmD,EAAQuD,cAAgBI,EAFd,gCAGH3D,EAAQ6D,cAAc,CACxBN,YAAaI,IAJR,OAMTH,IANS,2CAAH,sDAqBd,OACI,sBAAKpG,UAAU,YAAf,UACI,uBAAMT,SAAUA,EAAUS,UAAU,cAApC,UACI,uBACAd,SAjCK,SAACC,GAAW,IAEZG,EACTH,EADAC,OAASE,MAEbkH,EAAkBlH,IA8BVW,KAAK,OACLqC,WAAS,EACTpC,YAAY,eACZZ,MAAOiH,EACPvG,UAAU,cAEV,uBACEC,KAAK,SACLX,MAAM,iBACNU,UAAU,UACVgB,MAAO,CACLwE,UAAW,SAKnB,sBAAMxF,UAAU,2BAA2BI,QAvD7B,WAClBlC,EAAYwI,UACZL,EAAQM,KAAK,MAqDT,yBCXGC,EA7CG,SAAC,GAA0C,IAAxCR,EAAuC,EAAvCA,YAAaS,EAA0B,EAA1BA,YAAajE,EAAa,EAAbA,QAG3C,OACI,eAAC,IAAD,WACKiE,GAAe,cAAC,EAAD,CAAYjE,QAASA,IACrC,cAAC,IAAD,UACKiE,EAGD,sBAAK7F,MAAO,CACR8F,SAAU,IACVC,MAAO,OACPC,OAAQ,SACRxB,UAAW,GACXE,QAAS,OACTC,eAAgB,UANpB,UASI,cAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAMtE,QAASA,MAEnB,cAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,WAAlB,SACI,cAACC,EAAD,CAASvE,QAASA,EAASwD,YAAaA,SASjD,mCACA,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,cCeJE,MAnDf,WAAgB,IAAD,EAEW3I,oBAAS,GAFpB,mBAEN4I,EAFM,KAEAC,EAFA,OAIwB7I,oBAAS,GAJjC,gCAMiBA,mBAAS,OAN1B,mBAMNmE,EANM,KAMG2E,EANH,KA0Cb,OA/BArC,qBAAU,WACRhH,EAAYsJ,oBAAmB,SAACC,GAK5BF,EAJCE,EAIU,CACTtB,YAAasB,EAAKtB,YAClB/C,IAAKqE,EAAKrE,IACVqD,cAAe,SAACiB,GAAD,OAAUD,EAAKhB,cAAciB,KAIjC,MAEfJ,GAAQ,QAIV,IAaA,mCACCD,EAAO,cAAC,EAAD,CAAWjB,YAZD,WAClB,IAAMqB,EAAOvJ,EAAYyJ,YACzBJ,EAAW,CACTpB,YAAasB,EAAKtB,YAClB/C,IAAKqE,EAAKrE,IACVqD,cAAe,SAACiB,GAAD,OAAUD,EAAKhB,cAAciB,OAODb,YAAae,QAAQhF,GAAUA,QAASA,IAAe,qB,MC7CxGiF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6ecad4a1.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService } from 'fbase';\r\nimport React, { useState } from 'react';\r\n\r\nconst inputStyles = {};\r\n\r\nconst AuthForm = () => {\r\n\r\n    const [email, setEmail]  = useState(\"\");\r\n    const [password, setpassword]  = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        const { name, value } = event.target;\r\n        //const { target: {name, value}} = event;\r\n\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        }else if(name ===\"password\"){\r\n            setpassword(value);\r\n        }\r\n\r\n    };\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n\r\n            if(newAccount){\r\n                 data = await authService.createUserWithEmailAndPassword(email, password);\r\n                //create account\r\n            } else {\r\n                 data = await authService.signInWithEmailAndPassword(email, password);\r\n                //log in\r\n            }\r\n\r\n            console.log(data);\r\n    \r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\nreturn(\r\n    <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n            <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange = {onChange} className=\"authInput\"></input>    \r\n            <input name=\"password\" type=\"password\" placeholder=\"password\" required value={password} onChange = {onChange} className=\"authInput\"></input>    \r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Sign In\"} className=\"authInput authSubmit\"></input>    \r\n            {error && <span className=\"authError\">{error}</span>}\r\n            \r\n        </form>  \r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign in.\" : \"Create Account\"}\r\n        </span>\r\n    </>\r\n)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default AuthForm;","import AuthForm from \"component/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (event) => {\r\n\r\n        const {name} = event.target;\r\n        let provider;\r\n\r\n        if(name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n\r\n        }else if(name ===\"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        await authService.signInWithPopup(provider);\r\n    }\r\n\r\n    return(\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n            icon={faTwitter}\r\n            color={\"#04AAFF\"}\r\n            size=\"3x\"\r\n            style={{ marginBottom: 30 }}\r\n            />\r\n            <AuthForm />\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Auth;\r\n//functional component를 위와 같은 형태로 코딩할 경우 호출할때 자동으로 import 된다.\r\n//this is functional component\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//tweeter 게시글 목록에 해당하는 컴포넌트.\r\nconst Nweet = ({nweetObj, isOwner}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    //editing은 지금 editing 모드인지 아닌지를 판별함\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n    //eidt할 text를 가져오는 역할 \r\n\r\n        const onDeleteClick = async () => {\r\n            const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n\r\n            if(ok){\r\n                //delete tweeter\r\n               await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n               await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n\r\n            }else{\r\n                //삭제 할시 확인을 클릭했는지 취소를 클릭했는지 여부를 체크\r\n            }\r\n\r\n        };\r\n\r\n        const toggleEditing = () => setEditing((prev) => !prev);\r\n        const onSubmit = async (event) => {\r\n            event.preventDefault();\r\n            console.log(nweetObj, newNweet);\r\n\r\n            await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n                text: newNweet,\r\n            });\r\n\r\n            setEditing(false);\r\n        };\r\n        const onChange = (event) => {\r\n            const {\r\n                target: { value },\r\n            } = event;\r\n            setNewNweet(value);\r\n        };\r\n\r\n    return(\r\n            <div className=\"nweet\">\r\n            {\r\n                editing ? (\r\n                    <>\r\n                    {isOwner && (\r\n                        <>\r\n                            <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                                <input type=\"text\" placeholder=\"Edit your nweet\" value={newNweet} required autoFocus onChange={onChange} className=\"formInput\"></input>\r\n                                <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n                            </form>\r\n                            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                                Cancel\r\n                            </span>\r\n                        </>\r\n                    )}\r\n                    </>\r\n\r\n                ) : (\r\n\r\n                    <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n\r\n                    {isOwner && (\r\n                        <>\r\n                        <div class=\"nweet__actions\">\r\n                            <span onClick={onDeleteClick}>\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                            </span>\r\n                            <span onClick={toggleEditing}>\r\n                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                            </span>\r\n                        </div>\r\n                        </>\r\n                    )}\r\n                    </>\r\n                )\r\n\r\n            }\r\n\r\n\r\n    \r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\n\r\n\r\nexport default Nweet;","import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({userObj}) => {\r\n\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment , setAttachment] =  useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        if (nweet === \"\") {\r\n            return;\r\n          }\r\n\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n\r\n        //사진이 있다면 사진부터 저장하기\r\n        //파일에 대한 ref를 먼저 만들고 put으로 파일을 업로드\r\n        if( attachment !== \"\" ){\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment,\"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n\r\n        const nweetObj = {\r\n            text : nweet,\r\n            createdAt:Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        };\r\n        \r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\"); \r\n        setAttachment(\"\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const { target: {value}} = event;\r\n        setNweet(value);\r\n    }; \r\n\r\n    \r\n    const onFileChange = (event) => {\r\n        const { target: {files}} = event;\r\n        const theFile = files[0];\r\n        const reader =  new FileReader();\r\n        //FileReader는 외부 api를 사용한 것, 가져온 파일을 읽기 위한 용도\r\n        reader.onloadend = (finishedEvent) => {\r\n\r\n            const {\r\n                currentTarget: {result},\r\n            } =  finishedEvent;\r\n           \r\n            setAttachment(result);\r\n        };\r\n        //file 로딩이 끝나면 finishedEvent를 갖게 됨.\r\n        reader.readAsDataURL(theFile);\r\n        //file을 긴 text로 변환해줌 -> 브라우저에서 이미지로 변환가능\r\n    };\r\n\r\n    const onClearAttachmentClick = () => setAttachment(\"\");\r\n\r\n\r\n\r\nreturn(\r\n\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }} />\r\n\r\n        {attachment && (    \r\n                    <div className=\"factoryForm__attachment\">\r\n                    <img\r\n                      src={attachment}\r\n                      style={{\r\n                        backgroundImage: attachment,\r\n                      }}\r\n                    />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachmentClick}>\r\n                      <span>Remove</span>\r\n                      <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                    </div>\r\n    \r\n    )}\r\n    </form>\r\n);\r\n};\r\n\r\nexport default NweetFactory;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Nweet from \"component/Nweet\";\r\nimport NweetFactory from \"component/NweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [nweets, setNweets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        //snapshot은 실시간 db변경을 하기 위해 필요하다.\r\n        //db에 들어있는 값을 호출할때 사용 (콜렉션이름으로 호출후 document를 가져오는식)\r\n        //userEffect는 중요한 react hooks인데 원래는 didMount 같은걸로 이벤트를 체크하는데 userEffect hooks로 변화가 발생할때 캐치하는 것이 가능하다.\r\n        //결국 뭔짓을 해도 onSnapshot을 발동시키려는 용도이다.\r\n\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetArray =  snapshot.docs.map(doc => ({\r\n                id:doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setNweets(nweetArray);\r\n        })\r\n    } , []);\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj} />\r\n\r\n            <div style={{ marginTop: 30 }}>\r\n            {nweets.map(nweet => \r\n                <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userObj.uid} />\r\n                \r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({userObj}) => (\r\n<nav> \r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n            <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n            </Link>\r\n        </li>\r\n        <li>\r\n            \r\n        <Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n        </li>\r\n\r\n    </ul>\r\n</nav>\r\n\r\n);\r\n\r\n\r\n\r\nexport default Navigation;","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default ({refreshUser, userObj}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    \r\n    //logout function -> move to home page\r\n    const onLogOutClick = () => {   \r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n\r\n    };\r\n\r\n    const onSubmit = async (event) =>{\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            });\r\n            refreshUser();\r\n\r\n        }\r\n    };\r\n\r\n\r\n/*     const getMyNweets = async() => {\r\n        const nweets = await dbService.collection(\"nweets\").where(\"creatorId\", \"==\", userObj.uid).orderBy(\"createdAt\").get();\r\n        console.log(nweets);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    },[]); */\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                autoFocus\r\n                placeholder=\"Display name\"\r\n                value={newDisplayName}\r\n                className=\"formInput\"\r\n                />\r\n                <input\r\n                  type=\"submit\"\r\n                  value=\"Update Profile\"\r\n                  className=\"formBtn\"\r\n                  style={{\r\n                    marginTop: 10,\r\n                  }}\r\n                />\r\n            </form>\r\n\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                Log Out\r\n            </span>\r\n        </div>\r\n    );\r\n};","import React, {useState} from \"react\";\r\nimport { HashRouter as Router , Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"component/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\n\r\nconst AppRouter = ({ refreshUser, isLogigedIn, userObj}) => {\r\n\r\n    \r\n    return (\r\n        <Router>\r\n            {isLogigedIn && <Navigation userObj={userObj} /> }\r\n            <Switch>\r\n                {isLogigedIn ? (\r\n                \r\n\r\n                <div style={{\r\n                    maxWidth: 890,\r\n                    width: \"100%\",\r\n                    margin: \"0 auto\",\r\n                    marginTop: 80,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    }}>\r\n\r\n                    <Route exact path=\"/\">\r\n                        <Home userObj={userObj} />\r\n                    </Route>\r\n                    <Route exact path=\"/profile\">\r\n                        <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                        \r\n                    </Route>\r\n                </div>\r\n                \r\n            ) : (\r\n               //not loggedIn case\r\n               //Redirect의 의미는 route 중 갈 곳이 없으면 해당 주소로 가라는 뜻\r\n               //<Redirect from=\"*\" to=\"/\"></Redirect>\r\n               <>\r\n               <Route exact path=\"/\">\r\n                   <Auth />\r\n                </Route>\r\n               </>\r\n               )}\r\n\r\n            </Switch>\r\n\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import React, {useEffect, useState} from \"react\";\nimport AppRouter from 'component/Router';\nimport firebase from \"fbase\";\nimport {authService} from \"fbase\";\n\n\nfunction App() {\n\n  const [init, setInit] = useState(false);\n  //시작할 준비가 되었는지를 체크하는 init\n  const [isLogigedIn, setIsLoggedIn] = useState(false);\n  //로그인 여부를 체크하기 위한 props\n  const [userObj, setUserObj] = useState(null);\n  //로그인을 한다면 유저정보를 호출하는 props\n  //user 정보는 많은 페이지에서 필요로 하기 때문에 userObj props를 최상단에 위치 시킨것.\n\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        //setIsLoggedIn(true);\n        //이걸 사용해도되지만 props를 넘겨줄때 userObj의 boolean으로도 체크가능하다. 그래서 없앤것.\n        //user object를 통째로 넘기는 것 보다는 필요한 정보만 넘기는게 좋다.\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n\n      } else {\n          setUserObj(null);\n      }\n      setInit(true);\n\n    });\n\n  },[]);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n  };\n  \n  return (\n    <>\n    {init ? <AppRouter refreshUser={refreshUser} isLogigedIn={Boolean(userObj)} userObj={userObj} /> :  \"initializing...\" }\n    \n\n    </>\n  );\n}\n\nexport default App;\n\n\n // footer 잠깐 저장  <footer>&copy; {new Date().getFullYear()} Nwitter </footer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'component/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}